%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Sun Oct 27 12:26:45 2013
%%Title: /home/khalid/Desktop/electronicsLatex/figCh7/currentAmplifierTheveninEquivalent.sch
%%Author: (null)
%%BoundingBox: 0 0 482 180
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-43400 -42000 translate
gsave
44300 43400 44500 43300 10 line
44500 43300 44300 43200 10 line
44300 43200 44500 43100 10 line
44500 43100 44300 43000 10 line
44300 43400 44500 43500 10 line
44500 43500 44400 43550 10 line
44400 43700 44400 43550 10 line
44400 42800 44400 42952 10 line
44300 43001 44400 42950 10 line
grestore
gsave
45900 43400 46100 43300 10 line
46100 43300 45900 43200 10 line
45900 43200 46100 43100 10 line
46100 43100 45900 43000 10 line
45900 43400 46100 43500 10 line
46100 43500 46000 43550 10 line
46000 43700 46000 43550 10 line
46000 42800 46000 42952 10 line
45900 43001 46000 42950 10 line
grestore
gsave
48500 43400 48700 43300 10 line
48700 43300 48500 43200 10 line
48500 43200 48700 43100 10 line
48700 43100 48500 43000 10 line
48500 43400 48700 43500 10 line
48700 43500 48600 43550 10 line
48600 43700 48600 43550 10 line
48600 42800 48600 42952 10 line
48500 43001 48600 42950 10 line
grestore
gsave
49900 43400 50100 43300 10 line
50100 43300 49900 43200 10 line
49900 43200 50100 43100 10 line
50100 43100 49900 43000 10 line
49900 43400 50100 43500 10 line
50100 43500 50000 43550 10 line
50000 43700 50000 43550 10 line
50000 42800 50000 42952 10 line
49900 43001 50000 42950 10 line
grestore
gsave
43600 42100 43600 42300 10 line
43500 42100 43700 42100 10 line
43555 42050 43645 42050 10 line
43580 42010 43620 42010 10 line
grestore
gsave
50000 42100 50000 42300 10 line
49900 42100 50100 42100 10 line
49955 42050 50045 42050 10 line
49980 42010 50020 42010 10 line
grestore
43600 44000 46000 44000 10 line
46000 44000 46000 43700 10 line
47500 44000 50000 44000 10 line
47500 44000 47500 43600 10 line
50000 44000 50000 43700 10 line
50000 42300 50000 42800 10 line
50000 42500 47500 42500 10 line
47500 42500 47500 42800 10 line
46000 42800 46000 42500 10 line
43600 42500 46000 42500 10 line
43600 42300 43600 42800 10 line
43600 43700 43600 44000 10 line
[[44900 42000 45000 42000] [45100 42000 45200 42000] [45300 42000 45400 42000] [45500 42000 45600 42000] [45700 42000 45800 42000] [45900 42000 46000 42000] [46100 42000 46200 42000] [46300 42000 46400 42000] [46500 42000 46600 42000] [46700 42000 46800 42000] [46900 42000 47000 42000] [47100 42000 47200 42000] [47300 42000 47400 42000] [47500 42000 47600 42000] [47700 42000 47800 42000] [47900 42000 48000 42000] [48100 42000 48200 42000] [48300 42000 48400 42000] [48500 42000 48600 42000] [48700 42000 48800 42000] [48900 42000 49000 42000] [49100 42000 49200 42000] ] 10 dashed
[[49300 42000 49300 42100] [49300 42200 49300 42300] [49300 42400 49300 42500] [49300 42600 49300 42700] [49300 42800 49300 42900] [49300 43000 49300 43100] [49300 43200 49300 43300] [49300 43400 49300 43500] [49300 43600 49300 43700] [49300 43800 49300 43900] [49300 44000 49300 44100] [49300 44200 49300 44300] [49300 44400 49300 44500] ] 10 dashed
[[49300 44500 49200 44500] [49100 44500 49000 44500] [48900 44500 48800 44500] [48700 44500 48600 44500] [48500 44500 48400 44500] [48300 44500 48200 44500] [48100 44500 48000 44500] [47900 44500 47800 44500] [47700 44500 47600 44500] [47500 44500 47400 44500] [47300 44500 47200 44500] [47100 44500 47000 44500] [46900 44500 46800 44500] [46700 44500 46600 44500] [46500 44500 46400 44500] [46300 44500 46200 44500] [46100 44500 46000 44500] [45900 44500 45800 44500] [45700 44500 45600 44500] [45500 44500 45400 44500] [45300 44500 45200 44500] [45100 44500 45000 44500] ] 10 dashed
[[44900 44500 44900 44400] [44900 44300 44900 44200] [44900 44100 44900 44000] [44900 43900 44900 43800] [44900 43700 44900 43600] [44900 43500 44900 43400] [44900 43300 44900 43200] [44900 43100 44900 43000] [44900 42900 44900 42800] [44900 42700 44900 42600] [44900 42500 44900 42400] [44900 42300 44900 42200] [44900 42100 44900 42000] ] 10 dashed
gsave
43600 42800 43600 43000 10 line
43600 43700 43600 43500 10 line
43600 43250 200 0 360 10 darc
43600 43000 43600 43050 10 line
43600 43450 43600 43500 10 line
43600 43150 43600 43350 10 line
43600 43350 43550 43300 10 line
43600 43350 43650 43300 10 line
grestore
gsave
47500 42800 47500 43000 10 line
47500 43600 47500 43400 10 line
47500 43400 47300 43200 10 line
47300 43200 47500 43000 10 line
47500 43000 47700 43200 10 line
47700 43200 47500 43400 10 line
47500 43100 47500 43300 10 line
47500 43300 47450 43250 10 line
47500 43300 47550 43250 10 line
grestore
44400 43700 44400 44000 10 line
44400 42500 44400 42800 10 line
48600 43700 48600 44000 10 line
48600 42800 48600 42500 10 line
newpath
44400 44000
25
0 360 arc
fill
newpath
48600 44000
25
0 360 arc
fill
newpath
50000 42500
25
0 360 arc
fill
newpath
50000 42500
25
0 360 arc
fill
newpath
50000 42500
25
0 360 arc
fill
newpath
48600 42500
25
0 360 arc
fill
newpath
43600 42500
25
0 360 arc
fill
newpath
43600 42500
25
0 360 arc
fill
newpath
44400 42500
25
0 360 arc
fill
newpath
43600 42500
25
0 360 arc
fill
newpath
44400 44000
25
0 360 arc
fill
newpath
44400 44000
25
0 360 arc
fill
newpath
44400 42500
25
0 360 arc
fill
newpath
44400 42500
25
0 360 arc
fill
newpath
48600 44000
25
0 360 arc
fill
newpath
48600 44000
25
0 360 arc
fill
newpath
48600 42500
25
0 360 arc
fill
newpath
48600 42500
25
0 360 arc
fill
showpage
%%End
