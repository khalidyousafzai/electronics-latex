%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Mon Nov 18 11:15:18 2013
%%Title: /home/khalid/Desktop/electronicsLatex/figCh7/npnVoltageSeriesFeedback.sch
%%Author: (null)
%%BoundingBox: 0 0 504 294
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-46900 -44510 translate
gsave
48600 47400 48600 46800 10 line
48400 47100 48600 47100 10 line
gsave
false false false false 156.000000 [(B) ] 0 48500 47150 108.333336 text
grestore
48900 47600 48900 47400 10 line
gsave
false false false false 156.000000 [(C) ] 0 48800 47450 108.333336 text
grestore
48900 46800 48900 46600 10 line
gsave
false false false false 156.000000 [(E) ] 0 48800 46650 108.333336 text
grestore
48600 47250 48900 47400 10 line
48600 46950 48900 46800 10 line
10 setlinewidth
48803 46809 moveto 48901 46800 lineto 48831 46873 lineto 48825 46840 lineto closepath stroke
48803 46809 moveto 48901 46800 lineto 48831 46873 lineto 48825 46840 lineto closepath fill
grestore
gsave
48800 45400 49000 45300 10 line
49000 45300 48800 45200 10 line
48800 45200 49000 45100 10 line
49000 45100 48800 45000 10 line
48800 45400 49000 45500 10 line
49000 45500 48900 45550 10 line
48900 45700 48900 45550 10 line
48900 44800 48900 44952 10 line
48800 45001 48900 44950 10 line
grestore
gsave
48800 48200 49000 48100 10 line
49000 48100 48800 48000 10 line
48800 48000 49000 47900 10 line
49000 47900 48800 47800 10 line
48800 48200 49000 48300 10 line
49000 48300 48900 48350 10 line
48900 48500 48900 48350 10 line
48900 47600 48900 47752 10 line
48800 47801 48900 47750 10 line
grestore
gsave
47100 44900 47100 45100 10 line
47100 45800 47100 45600 10 line
47100 45350 200 0 360 10 darc
47100 45100 47100 45150 10 line
47100 45550 47100 45600 10 line
gsave
false false false false 260.000000 [(+) ] 0 47047 45400 180.555557 text
grestore
gsave
false false false false 260.000000 [(-) ] 0 47070 45200 180.555557 text
grestore
grestore
gsave
48900 44600 48900 44800 10 line
48800 44600 49000 44600 10 line
48855 44550 48945 44550 10 line
48880 44510 48920 44510 10 line
grestore
gsave
47100 44600 47100 44800 10 line
47000 44600 47200 44600 10 line
47055 44550 47145 44550 10 line
47080 44510 47120 44510 10 line
grestore
47100 47100 48400 47100 10 line
47100 44800 47100 44900 10 line
47100 45800 47100 47100 10 line
48900 45700 48900 46600 10 line
gsave
53300 47300 53300 46700 10 line
53100 47000 53300 47000 10 line
gsave
false false false false 156.000000 [(B) ] 0 53200 47050 108.333336 text
grestore
53600 47500 53600 47300 10 line
gsave
false false false false 156.000000 [(C) ] 0 53500 47350 108.333336 text
grestore
53600 46700 53600 46500 10 line
gsave
false false false false 156.000000 [(E) ] 0 53500 46550 108.333336 text
grestore
53300 47150 53600 47300 10 line
53300 46850 53600 46700 10 line
10 setlinewidth
53503 46709 moveto 53601 46700 lineto 53531 46773 lineto 53525 46740 lineto closepath stroke
53503 46709 moveto 53601 46700 lineto 53531 46773 lineto 53525 46740 lineto closepath fill
grestore
gsave
53500 46200 53700 46100 10 line
53700 46100 53500 46000 10 line
53500 46000 53700 45900 10 line
53700 45900 53500 45800 10 line
53500 46200 53700 46300 10 line
53700 46300 53600 46350 10 line
53600 46500 53600 46350 10 line
53600 45600 53600 45752 10 line
53500 45801 53600 45750 10 line
grestore
gsave
53500 48100 53700 48000 10 line
53700 48000 53500 47900 10 line
53500 47900 53700 47800 10 line
53700 47800 53500 47700 10 line
53500 48100 53700 48200 10 line
53700 48200 53600 48250 10 line
53600 48400 53600 48250 10 line
53600 47500 53600 47652 10 line
53500 47701 53600 47650 10 line
grestore
gsave
51800 45700 51800 45900 10 line
51800 46600 51800 46400 10 line
51800 46150 200 0 360 10 darc
51800 45900 51800 45950 10 line
51800 46350 51800 46400 10 line
gsave
false false false false 260.000000 [(+) ] 0 51747 46200 180.555557 text
grestore
gsave
false false false false 260.000000 [(-) ] 0 51770 46000 180.555557 text
grestore
grestore
gsave
53600 48400 53600 48600 10 line
53450 48600 53750 48600 10 line
grestore
gsave
53600 45400 53600 45600 10 line
53500 45400 53700 45400 10 line
53555 45350 53645 45350 10 line
53580 45310 53620 45310 10 line
grestore
gsave
51800 45400 51800 45600 10 line
51700 45400 51900 45400 10 line
51755 45350 51845 45350 10 line
51780 45310 51820 45310 10 line
grestore
51800 47000 53100 47000 10 line
51800 45600 51800 45700 10 line
51800 46600 51800 47000 10 line
gsave
47500 48400 47500 48600 10 line
47400 48400 47600 48400 10 line
47455 48350 47545 48350 10 line
47480 48310 47520 48310 10 line
grestore
48900 48600 47500 48600 10 line
48900 48600 48900 48500 10 line
53900 46500 53600 46500 10 line
49300 45900 48900 45900 10 line
newpath
48900 45900
25
0 360 arc
fill
60 60 53870 46470 fbox
newpath
53600 46500
25
0 360 arc
fill
60 60 49270 45870 fbox
newpath
48900 45900
25
0 360 arc
fill
newpath
48900 45900
25
0 360 arc
fill
showpage
%%End
