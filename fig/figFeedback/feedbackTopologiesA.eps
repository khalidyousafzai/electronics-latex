%!PS-Adobe-3.0 EPSF-3.0 
%%BoundingBox: 0 0 555 303
%%Pages: 0
%%Creator: LibreOffice 3.3
%%Title: none
%%CreationDate: none
%%LanguageLevel: 2
%%EndComments
%%BeginProlog
%%BeginResource: procset SDRes-Prolog 1.0 0
/b4_inc_state save def
/dict_count countdictstack def
/op_count count 1 sub def
userdict begin
0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit[] 0 setdash newpath
/languagelevel where {pop languagelevel 1 ne {false setstrokeadjust false setoverprint} if} if
/bdef {bind def} bind def
/c {setgray} bdef
/l {neg lineto} bdef
/rl {neg rlineto} bdef
/lc {setlinecap} bdef
/lj {setlinejoin} bdef
/lw {setlinewidth} bdef
/ml {setmiterlimit} bdef
/ld {setdash} bdef
/m {neg moveto} bdef
/ct {6 2 roll neg 6 2 roll neg 6 2 roll neg curveto} bdef
/r {rotate} bdef
/t {neg translate} bdef
/s {scale} bdef
/sw {show} bdef
/gs {gsave} bdef
/gr {grestore} bdef
/f {findfont dup length dict begin
{1 index /FID ne {def} {pop pop} ifelse} forall /Encoding ISOLatin1Encoding def
currentdict end /NFont exch definefont pop /NFont findfont} bdef
/p {closepath} bdef
/sf {scalefont setfont} bdef
/ef {eofill}bdef
/pc {closepath stroke}bdef
/ps {stroke}bdef
/pum {matrix currentmatrix}bdef
/pom {setmatrix}bdef
/bs {/aString exch def /nXOfs exch def /nWidth exch def currentpoint nXOfs 0 rmoveto pum nWidth aString stringwidth pop div 1 scale aString show pom moveto} bdef
%%EndResource
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
%%EndPageSetup
pum
0.02833 0.02831 s 
0 -10700 t
/tm matrix currentmatrix def
gs
tm setmatrix
-1000 -1000 t 
1 1 s 
1000 1000 m 20589 1000 l 20589 11699 l 1000 11699 l 1000 1000 l eoclip newpath
gs
0 0 m 19589 0 l 19589 10699 l 0 10699 l 0 0 l eoclip newpath
gs
tm setmatrix
0 0 t 
20.5004 16.38049 s 
gs
gs
tm setmatrix
0 166630.59118 t 
20.52262 16.4071 s 
%%BeginDocument:
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Sat Nov  2 08:15:47 2013
%%Title: /home/khalid/Desktop/electronicsLatex/figCh7/feedbackTopologiesA.sch
%%Author: (null)
%%BoundingBox: 0 0 928 619
%%Orientation: Portrait
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
0 0 translate
1.000000 1.000000 scale
-35900 -41900 translate
gsave
45000 48400 46800 48400 10 line
46800 48400 46800 49700 10 line
46800 49700 45000 49700 10 line
45000 49700 45000 48400 10 line
46900 49500 46800 49500 10 line
44900 49500 45000 49500 10 line
44900 48600 45000 48600 10 line
46900 48600 46800 48600 10 line
grestore
gsave
45000 46700 46800 46700 10 line
46800 46700 46800 48000 10 line
46800 48000 45000 48000 10 line
45000 48000 45000 46700 10 line
46900 47800 46800 47800 10 line
44900 47800 45000 47800 10 line
44900 46900 45000 46900 10 line
46900 46900 46800 46900 10 line
grestore
gsave
47900 49200 48100 49100 10 line
48100 49100 47900 49000 10 line
47900 49000 48100 48900 10 line
48100 48900 47900 48800 10 line
47900 49200 48100 49300 10 line
48100 49300 48000 49350 10 line
48000 49500 48000 49350 10 line
48000 48600 48000 48752 10 line
47900 48801 48000 48750 10 line
grestore
46900 49500 48000 49500 10 line
46900 48600 48000 48600 10 line
47100 49500 47100 47800 10 line
47100 47800 46900 47800 10 line
47600 48600 47600 46900 10 line
47600 46900 46900 46900 10 line
gsave
43600 48600 43600 48800 10 line
43600 49500 43600 49300 10 line
43600 49050 200 0 360 10 darc
43600 48800 43600 48850 10 line
43600 49250 43600 49300 10 line
gsave
false false false false 260.000000 [(+) ] 0 43547 49100 180.555557 text
grestore
gsave
false false false false 260.000000 [(-) ] 0 43570 48900 180.555557 text
grestore
grestore
44900 49500 43600 49500 10 line
44900 48600 44300 48600 10 line
44300 48600 44300 47800 10 line
44300 47800 44900 47800 10 line
44900 46900 43600 46900 10 line
43600 46900 43600 48600 10 line
gsave
38200 48400 40000 48400 10 line
40000 48400 40000 49700 10 line
40000 49700 38200 49700 10 line
38200 49700 38200 48400 10 line
40100 49500 40000 49500 10 line
38100 49500 38200 49500 10 line
38100 48600 38200 48600 10 line
40100 48600 40000 48600 10 line
grestore
gsave
38200 46700 40000 46700 10 line
40000 46700 40000 48000 10 line
40000 48000 38200 48000 10 line
38200 48000 38200 46700 10 line
40100 47800 40000 47800 10 line
38100 47800 38200 47800 10 line
38100 46900 38200 46900 10 line
40100 46900 40000 46900 10 line
grestore
gsave
41100 49200 41300 49100 10 line
41300 49100 41100 49000 10 line
41100 49000 41300 48900 10 line
41300 48900 41100 48800 10 line
41100 49200 41300 49300 10 line
41300 49300 41200 49350 10 line
41200 49500 41200 49350 10 line
41200 48600 41200 48752 10 line
41100 48801 41200 48750 10 line
grestore
40100 49500 41200 49500 10 line
40300 47800 40100 47800 10 line
40800 48600 40800 46900 10 line
40800 46900 40100 46900 10 line
gsave
36800 48600 36800 48800 10 line
36800 49500 36800 49300 10 line
36800 49050 200 0 360 10 darc
36800 48800 36800 48850 10 line
36800 49250 36800 49300 10 line
gsave
false false false false 260.000000 [(+) ] 0 36747 49100 180.555557 text
grestore
gsave
false false false false 260.000000 [(-) ] 0 36770 48900 180.555557 text
grestore
grestore
38100 49500 36800 49500 10 line
38100 48600 37500 48600 10 line
37500 48600 37500 47800 10 line
37500 47800 38100 47800 10 line
38100 46900 36800 46900 10 line
36800 46900 36800 48600 10 line
gsave
45000 44600 46800 44600 10 line
46800 44600 46800 45900 10 line
46800 45900 45000 45900 10 line
45000 45900 45000 44600 10 line
46900 45700 46800 45700 10 line
44900 45700 45000 45700 10 line
44900 44800 45000 44800 10 line
46900 44800 46800 44800 10 line
grestore
gsave
45000 42900 46800 42900 10 line
46800 42900 46800 44200 10 line
46800 44200 45000 44200 10 line
45000 44200 45000 42900 10 line
46900 44000 46800 44000 10 line
44900 44000 45000 44000 10 line
44900 43100 45000 43100 10 line
46900 43100 46800 43100 10 line
grestore
gsave
47900 45400 48100 45300 10 line
48100 45300 47900 45200 10 line
47900 45200 48100 45100 10 line
48100 45100 47900 45000 10 line
47900 45400 48100 45500 10 line
48100 45500 48000 45550 10 line
48000 45700 48000 45550 10 line
48000 44800 48000 44952 10 line
47900 45001 48000 44950 10 line
grestore
46900 45700 48000 45700 10 line
46900 44000 47200 44000 10 line
47600 44800 47600 43100 10 line
47600 43100 46900 43100 10 line
44900 45700 43600 45700 10 line
44900 44800 43600 44800 10 line
44500 44800 44500 44000 10 line
44500 44000 44900 44000 10 line
44900 43100 44200 43100 10 line
gsave
38200 44600 40000 44600 10 line
40000 44600 40000 45900 10 line
40000 45900 38200 45900 10 line
38200 45900 38200 44600 10 line
40100 45700 40000 45700 10 line
38100 45700 38200 45700 10 line
38100 44800 38200 44800 10 line
40100 44800 40000 44800 10 line
grestore
gsave
38200 42900 40000 42900 10 line
40000 42900 40000 44200 10 line
40000 44200 38200 44200 10 line
38200 44200 38200 42900 10 line
40100 44000 40000 44000 10 line
38100 44000 38200 44000 10 line
38100 43100 38200 43100 10 line
40100 43100 40000 43100 10 line
grestore
gsave
41100 45400 41300 45300 10 line
41300 45300 41100 45200 10 line
41100 45200 41300 45100 10 line
41300 45100 41100 45000 10 line
41100 45400 41300 45500 10 line
41300 45500 41200 45550 10 line
41200 45700 41200 45550 10 line
41200 44800 41200 44952 10 line
41100 45001 41200 44950 10 line
grestore
40100 45700 41200 45700 10 line
40100 44800 41200 44800 10 line
40300 45700 40300 44000 10 line
40300 44000 40100 44000 10 line
40800 44800 40800 43100 10 line
40800 43100 40100 43100 10 line
38100 45700 36800 45700 10 line
36800 44800 38100 44800 10 line
37500 44800 37500 44000 10 line
37500 44000 38100 44000 10 line
38100 43100 37200 43100 10 line
gsave
43600 44800 43600 45000 10 line
43600 45700 43600 45500 10 line
43600 45250 200 0 360 10 darc
43600 45000 43600 45050 10 line
43600 45450 43600 45500 10 line
43600 45100 43600 45400 10 line
43500 45300 43600 45400 10 line
43700 45300 43600 45400 10 line
grestore
44200 43100 44200 45700 10 line
47600 44800 48000 44800 10 line
46900 44800 47200 44800 10 line
47200 44800 47200 44000 10 line
40100 48600 40300 48600 10 line
40300 48600 40300 47800 10 line
40800 48600 41200 48600 10 line
gsave
36800 44800 36800 45000 10 line
36800 45700 36800 45500 10 line
36800 45250 200 0 360 10 darc
36800 45000 36800 45050 10 line
36800 45450 36800 45500 10 line
36800 45100 36800 45400 10 line
36700 45300 36800 45400 10 line
36900 45300 36800 45400 10 line
grestore
37200 45700 37200 43100 10 line
35900 41900 48800 41900 10 line
48800 41900 48800 50500 10 line
48800 50500 35900 50500 10 line
35900 50500 35900 41900 10 line
newpath
47100 49500
25
0 360 arc
fill
newpath
47600 48600
25
0 360 arc
fill
newpath
47100 49500
25
0 360 arc
fill
newpath
47100 49500
25
0 360 arc
fill
newpath
47600 48600
25
0 360 arc
fill
newpath
47600 48600
25
0 360 arc
fill
newpath
44200 45700
25
0 360 arc
fill
newpath
44500 44800
25
0 360 arc
fill
newpath
44500 44800
25
0 360 arc
fill
newpath
44500 44800
25
0 360 arc
fill
newpath
40300 45700
25
0 360 arc
fill
newpath
40800 44800
25
0 360 arc
fill
newpath
40300 45700
25
0 360 arc
fill
newpath
40300 45700
25
0 360 arc
fill
newpath
40800 44800
25
0 360 arc
fill
newpath
40800 44800
25
0 360 arc
fill
newpath
37200 45700
25
0 360 arc
fill
newpath
37500 44800
25
0 360 arc
fill
newpath
37500 44800
25
0 360 arc
fill
newpath
37500 44800
25
0 360 arc
fill
newpath
44200 45700
25
0 360 arc
fill
newpath
44200 45700
25
0 360 arc
fill
newpath
37200 45700
25
0 360 arc
fill
newpath
37200 45700
25
0 360 arc
fill
showpage
%%End
%%EndDocument
gr
gr
gr

gr
gs
0 0 m 19589 0 l 19589 10699 l 0 10699 l 0 0 l eoclip newpath
gr
gr
0 10700 t 
pom
count op_count sub {pop} repeat countdictstack dict_count sub {end} repeat b4_inc_state restore
%%PageTrailer
%%Trailer
%%EOF
